# FSD Configuration Example
# Place this at: .fsd/config.yaml or ~/.config/fsd/config.yaml

# Agent Configuration
agent:
  # Maximum total execution time for overnight session
  max_execution_time: 8h

  # Create checkpoint commit every N minutes if changes exist
  checkpoint_interval: 5m

  # Maximum retries per step before escalating
  retry_limit: 3

  # Maximum concurrent tasks (0 = sequential only)
  parallel_tasks: 2

  # Execution mode: interactive | autonomous | dry_run
  mode: autonomous

# Claude CLI Configuration
claude:
  # Use claude CLI directly for all agent operations
  command: "claude --dangerously-skip-permissions"
  
  # Working directory for claude operations
  working_dir: "."
  
  # Timeout for claude operations
  timeout: 30m
  
  # Environment variables to pass to claude
  env:
    # Add any needed environment variables here
    EDITOR: "code"

# Safety Configuration
safety:
  # Branches that cannot be modified directly
  protected_branches:
    - main
    - master
    - production
    - release/*

  # Required checks before committing
  checks:
    require_tests: true        # Must run tests
    require_type_check: true   # Must pass type checking
    require_lint: true         # Must pass linting
    secret_scan: true          # Scan for secrets
    coverage_threshold: 0      # Min coverage (0 = disabled)

  # Automatic merge settings
  auto_merge:
    enabled: false            # Never auto-merge by default
    require_reviews: 1        # Min reviews needed
    require_checks: true      # Must pass CI checks

  # File operation limits
  limits:
    max_files_per_commit: 50
    max_lines_per_file: 5000
    max_total_changes: 10000  # lines

# Git Configuration
git:
  # Branch naming for tasks
  branch_prefix: "fsd/"
  branch_format: "${prefix}${task_id}"  # e.g., fsd/auth-bug-123

  # Commit message format
  commit_format: |
    ${type}: ${description}

    Task: ${task_id}
    Step: ${step_id}

    ðŸ¤– Generated with FSD Autonomous Agent

  # Enable GPG signing
  sign_commits: false

  # Git user for commits
  user:
    name: "FSD Agent"
    email: "fsd-agent@example.com"

# Validation Configuration
validation:
  # Test runner commands
  test_commands:
    python: "uv run pytest"
    typescript: "npm test"
    javascript: "npm test"

  # Type checker commands
  type_check_commands:
    python: "uv run mypy ."
    typescript: "npm run type-check"

  # Linter commands
  lint_commands:
    python: "uv run ruff check ."
    typescript: "npm run lint"

  # Timeout for validation commands
  timeout: 10m

# Checkpoint Configuration
checkpoint:
  # Strategy: time_based | step_based | hybrid
  strategy: hybrid

  # Create checkpoint every N steps
  step_interval: 1

  # Create checkpoint every N minutes
  time_interval: 5m

  # Metadata to store with checkpoints
  metadata:
    - step_id
    - step_name
    - timestamp
    - status
    - files_changed
    - tests_passed

# Recovery Configuration
recovery:
  # Error classification and strategies
  strategies:
    # Network/API errors: retry with backoff
    network_error:
      type: retry
      max_attempts: 5
      backoff: exponential  # 1s, 2s, 4s, 8s, 16s
      escalate: false

    # Test failures: analyze and fix
    test_failure:
      type: analyze_and_fix
      max_attempts: 3
      actions:
        - analyze_test_output
        - identify_root_cause
        - generate_fix
        - apply_fix
        - retry_test
      escalate: true

    # Type errors: fix with LLM
    type_error:
      type: llm_fix
      max_attempts: 2
      actions:
        - run_type_checker
        - extract_errors
        - generate_fix
        - verify_types
      escalate: true

    # Syntax errors: fix immediately
    syntax_error:
      type: llm_fix
      max_attempts: 2
      escalate: true

    # Resource errors: wait and retry
    resource_error:
      type: retry
      max_attempts: 3
      backoff: linear  # 5m, 10m, 15m
      escalate: true

  # Circuit breaker: stop after N consecutive failures
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    reset_timeout: 30m

# Logging Configuration
logging:
  # Log level: DEBUG | INFO | WARN | ERROR
  level: INFO

  # Log format: text | json
  format: json

  # Log output directory
  output_dir: ./fsd/logs

  # Log retention
  retention_days: 30

  # Separate log files
  separate_files:
    tasks: true      # One log file per task
    steps: false     # Don't separate by step

  # Include in logs
  include:
    timestamps: true
    task_id: true
    step_id: true
    agent_type: true
    llm_usage: true  # Token counts

# Notification Configuration
notifications:
  # Enabled notification types
  enabled: true

  # Events that trigger notifications
  events:
    - task_started
    - task_completed
    - task_failed
    - execution_started
    - execution_finished
    - critical_error

  # Notification channels
  channels:
    # Slack integration
    slack:
      enabled: true
      webhook_url: ${SLACK_WEBHOOK_URL}
      channel: "#dev-fsd"
      mention_on_failure: "@channel"

    # Email notifications
    email:
      enabled: false
      smtp_host: ${SMTP_HOST}
      smtp_port: 587
      smtp_user: ${SMTP_USER}
      smtp_password: ${SMTP_PASSWORD}
      from: "fsd-agent@example.com"
      to:
        - "dev-team@example.com"

    # CLI notifications (desktop notifications)
    cli:
      enabled: true
      sound: true

# Reporting Configuration
reporting:
  # Generate morning summary report
  morning_summary:
    enabled: true
    format: markdown
    include:
      - execution_summary
      - completed_tasks
      - failed_tasks
      - blocked_tasks
      - code_changes_summary
      - test_results
      - actionable_items

    # Send report to
    destinations:
      - file: ./fsd/reports/summary-${date}.md
      - slack: "#dev-fsd"
      - email: true

  # Per-task detailed report
  task_report:
    enabled: true
    format: markdown
    include:
      - task_definition
      - execution_log
      - step_details
      - test_results
      - code_changes
      - time_breakdown
      - resource_usage

    output_dir: ./fsd/reports/tasks

# Resource Management
resources:
  # System resource limits
  limits:
    max_memory: 8GB
    max_cpu_percent: 80
    max_disk_space: 50GB

  # Monitoring
  monitoring:
    enabled: true
    check_interval: 1m

    # Actions when limits exceeded
    on_limit_exceeded:
      - pause_execution
      - notify
      - wait: 5m
      - resume_or_fail

# Integration with Existing MCP
mcp:
  # Use existing MCP tools
  use_mcp_tools: true

  # MCP server configuration
  server:
    enabled: true
    add_endpoints: true
    port: 8000

  # Plugins to use
  plugins:
    - command_execution
    - git_tools
    - knowledge_indexer
    - azure_devops

# Task Queue Configuration
queue:
  # Queue persistence
  persistence: sqlite  # sqlite | redis | memory
  db_path: ./fsd/queue.db

  # Scheduling
  scheduling:
    # Priority weights (higher = more important)
    priority_weights:
      critical: 100
      high: 50
      medium: 20
      low: 10

    # Task selection strategy
    strategy: priority_then_fifo

  # Execution window
  execution_window:
    start: "22:00"  # 10 PM
    end: "06:00"    # 6 AM
    timezone: "America/Los_Angeles"

# Debug Configuration
debug:
  # Enable debug mode
  enabled: false

  # Save intermediate states
  save_states: true

  # Verbose logging
  verbose: true

  # Dry run: don't make actual changes
  dry_run: false

  # Stop on first error
  fail_fast: false
